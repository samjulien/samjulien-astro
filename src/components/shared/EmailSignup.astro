---
import Input from '../forms/Input.astro';
import SuccessMessage from '../forms/SuccessMessage.astro';
---

<div class="bg-gray-100 p-8 rounded-lg">
  <div id="signup-form">
    <h2 class="text-2xl font-bold mb-4">Project list gathering dust? ðŸ‘€</h2>
    <p class="mb-6">
      Drop me a line below so I can send you the Tiny Experiments framework and worksheet. You'll also join over 2100 other devs and dev advocates on the Developer Microskills newsletter.
    </p>
    <form id="newsletter-form" class="flex flex-col md:flex-row gap-4">
      <Input
        label="First Name"
        name="first_name"
        placeholder="Garak"
      />
      <Input
        label="Email"
        name="email"
        type="email"
        placeholder="garak@ds9.station"
        required
      />
      <button
        type="submit"
        class="md:self-end bg-brand hover:bg-brand-dark text-white font-bold py-2 px-6 rounded"
      >
        Sign Up
      </button>
    </form>
  </div>
  <div id="success-message" class="hidden">
    <SuccessMessage />
  </div>
</div>

<script>
  import { subscribeToNewsletter } from '../../lib/convertkit';
  import * as Yup from 'yup';

  const form = document.getElementById('newsletter-form');
  const signupForm = document.getElementById('signup-form');
  const successMessage = document.getElementById('success-message');

  const schema = Yup.object().shape({
    email: Yup.string().email('Invalid email address').required('Required'),
    first_name: Yup.string(),
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const values = {
      email: formData.get('email') as string,
      first_name: formData.get('first_name') as string,
    };

    // Clear previous errors
    document.querySelectorAll('[data-error]').forEach(el => {
      el.textContent = '';
    });

    try {
      await schema.validate(values, { abortEarly: false });
      const submitButton = form.querySelector('button[type="submit"]');
      if (submitButton) {
        submitButton.textContent = 'Processing...';
        submitButton.disabled = true;
      }

      await subscribeToNewsletter(values);
      
      if (signupForm && successMessage) {
        signupForm.classList.add('hidden');
        successMessage.classList.remove('hidden');
      }
    } catch (error) {
      if (error instanceof Yup.ValidationError) {
        error.inner.forEach((err) => {
          const errorDiv = document.querySelector(`[data-error="${err.path}"]`);
          if (errorDiv) {
            errorDiv.textContent = err.message;
          }
        });
      } else {
        console.error('Subscription failed:', error);
        alert('Something went wrong! Please try again.');
      }
    }
  });
</script>